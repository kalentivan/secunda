#!/bin/bash
# –û–ë–ù–û–í–õ–ï–ù–ò–ï –° –ì–ò–¢–ê –ü–†–û–ï–ö–¢–ê

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
init() {
  # –¶–≤–µ—Ç–∞
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  NC='\033[0m'

  FOLDER="secunda"
  REPO="https://github.com/kalentivan/secunda.git"
  NET="secunda-net"
  IMAGE="secunda-backend"
  BASE_ENV="/root/config/s.env"
  BRANCH="master"
  LOAD_DOCKER="y"
  DEL_PROJECT="n"

  CONTAINERS=(
    "secunda-backend"
    "secunda-psql"
  )
}

sep() {
  echo "----------"
}

# –§—É–Ω–∫—Ü–∏—è –æ—à–∏–±–∫–∏
error_exit() {
    echo -e "${RED}–û—à–∏–±–∫–∞: $1${NC}" >&2
    exit 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–∫–µ—Ä
load_docker() {
  sudo apt-get update
  sudo apt-get install -y ca-certificates curl gnupg lsb-release || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Ubuntu
  UBUNTU_VERSION=$(lsb_release -cs)
  echo "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–µ—Ä—Å–∏—è Ubuntu: $UBUNTU_VERSION"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
  if ! command -v docker &>/dev/null; then
      echo "‚¨áÔ∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
  else
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker —á–µ—Ä–µ–∑ snap
      if command -v snap &>/dev/null && snap list | grep -q docker; then
          echo "üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω Docker, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ snap - –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ apt..."
          sudo snap remove docker --purge
          sudo rm -f /etc/apt/keyrings/docker.gpg
          sudo rm -f /etc/apt/sources.list.d/docker.list
      else
          echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ —á–µ—Ä–µ–∑ snap)"
          docker --version
      fi
  fi

  echo "üîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ Docker..."
  sudo install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg || error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á Docker"
  sudo chmod a+r /etc/apt/keyrings/docker.gpg

  echo "üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker..."
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $UBUNTU_VERSION stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"

  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —á–µ—Ä–µ–∑ apt
  if ! command -v docker &>/dev/null; then
      echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
      sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin || error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker"
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker compose V2
  if ! docker compose version &>/dev/null; then
      echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Compose V2 (plugin)..."
      sudo apt-get install -y docker-compose-plugin || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å docker compose plugin"
  else
      echo "‚úÖ Docker Compose V2 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  fi

  # –ó–∞–ø—É—Å–∫ –∏ enable Docker
  if ! systemctl is-active --quiet docker; then
      echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Docker..."
      sudo systemctl start docker || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker"
      sudo systemctl enable docker
  else
      echo "‚úÖ Docker —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
  fi

  echo -e "${GREEN}‚úÖ Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!${NC}"
}

# –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
show_args() {
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  echo -e "${GREEN}–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:${NC}"
  echo -e "  üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞       : ${FOLDER}"
  echo -e "  üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π         : ${REPO}"
  echo -e "  üåê Docker-—Å–µ—Ç—å         : ${NET}"
  echo -e "  üê≥ Docker-–æ–±—Ä–∞–∑        : ${IMAGE}"
  echo -e "  üìÑ .env-—Ñ–∞–π–ª           : ${BASE_ENV}"
  echo -e "  üåø –í–µ—Ç–∫–∞ Git           : ${BRANCH}"
  echo -e "  üåø –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É       : ${DEL_PROJECT}"
  echo -e "  üåø –°–∫–∞—á–∞—Ç—å –¥–æ–∫–µ—Ä       : ${LOAD_DOCKER}"
  echo -e "${GREEN}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:${NC}"
  for container in "${CONTAINERS[@]}"; do
      echo -e "  üì¶ $container"
  done
  echo -e ""
}

# –í—ã–≤–æ–¥ —Ñ–ª–∞–≥–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞
usage() {
  echo -e "${GREEN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]${NC}"
  echo
  echo "–û–ø—Ü–∏–∏:"
  echo "  -f <folder>     –ü–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'secunda')"
  echo "  -r <repo>       –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'https://github...')"
  echo "  -n <net>        –ù–∞–∑–≤–∞–Ω–∏–µ Docker-—Å–µ—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'secunda-net')"
  echo "  -i <image>      –ù–∞–∑–≤–∞–Ω–∏–µ Docker-–æ–±—Ä–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'secunda-backend')"
  echo "  -e <env>        –ü—É—Ç—å –∫ .env-—Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '/root/config/s.env')"
  echo "  -b <branch>     –í–µ—Ç–∫–∞ Git (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'master')"
  echo "  -h              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É –∏ –≤—ã–π—Ç–∏"
  echo "  -s <y|n>        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'n')"
  echo "  -d <y|n>        –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'n')"
  echo -e ""
  show_args
  exit 0
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
parse() {
  local help_triggered=false
  while getopts ":f:r:n:i:e:b:s:d:h" opt; do
    case $opt in
      f) FOLDER="$OPTARG" ;;
      r) REPO="$OPTARG" ;;
      n) NET="$OPTARG" ;;
      i) IMAGE="$OPTARG" ;;
      e) BASE_ENV="$OPTARG" ;;
      b) BRANCH="$OPTARG" ;;
      s) LOAD_DOCKER="$OPTARG" ;;
      d) DEL_PROJECT="$OPTARG" ;;
      h)
        help_triggered=true
        usage
        ;;
      \?)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: -$OPTARG${NC}" >&2
        usage
        exit 1
        ;;
      :)
        echo -e "${RED}‚ùå –û–ø—Ü–∏—è -$OPTARG —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç.${NC}" >&2
        usage
        exit 1
        ;;
    esac
  done
  # –í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞
  if [ "$help_triggered" = true ]; then
    show_args
    exit 0
  fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
stop_container() {
  local container="$1"

  if [ "$(docker ps -q -f name="$container")" ]; then
      echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container..."
      docker stop "$container" || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container"
  fi

  if [ "$(docker ps -aq -f name="$container")" ]; then
      echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container..."
      docker rm "$container" || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Git-–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
git_with_retry() {
  local max_attempts=3
  local attempt=1
  local success=false

  while [ $attempt -le $max_attempts ]; do
      if "$@"; then
          success=true
          break
      else
          echo "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã..."
          sleep 2
          ((attempt++))
      fi
  done

  if [ "$success" = false ]; then
      error_exit "üõë–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å Git-–æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
  fi
}

# –û–±–Ω–æ–≤–∏—Ç—å —Å –≥–∏—Ç–∞
git_update() {
  if ! command -v git &>/dev/null; then
      echo "üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git..."
      sudo apt-get install -y git || error_exit "üõë–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Git"
  fi

  if [ -d ".git" ] && [ -f ".git/config" ]; then
      echo "üîÑ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º..."
      git_with_retry git pull origin "$BRANCH"
  else
      if [ "$(ls -A .)" ]; then
          echo -e "${RED}‚ùå –ö–∞—Ç–∞–ª–æ–≥ $FOLDER –Ω–µ –ø—É—Å—Ç –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.${NC}"
          read -p "üîÅ –£–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/N): " confirm
          if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
              echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ $FOLDER..."
              rm -rf ./* .[^.]* 2>/dev/null
              echo "‚¨áÔ∏è –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ $FOLDER..."
              git_with_retry git clone -b "$BRANCH" "$REPO" .
          else
              error_exit "‚õî –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û—á–∏—Å—Ç–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É—Ç—å."
          fi
      else
          echo "‚¨áÔ∏è –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ $FOLDER..."
          git_with_retry git clone -b "$BRANCH" "$REPO" .
      fi
  fi
}

# –°–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_set() {
  # –ü—É—Ç—å –∫ Python —Å–∫—Ä–∏–ø—Ç—É
  PYTHON_SCRIPT="./scripts/init_env.py"

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ Python —Å–∫—Ä–∏–ø—Ç
  if [ ! -f "$PYTHON_SCRIPT" ]; then
      echo "üõë Python —Å–∫—Ä–∏–ø—Ç $PYTHON_SCRIPT –Ω–µ –Ω–∞–π–¥–µ–Ω"
      exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π .env —Ñ–∞–π–ª
  if [ ! -f "$BASE_ENV" ]; then
      echo "üõë –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª "$BASE_ENV" –Ω–µ –Ω–∞–π–¥–µ–Ω"
      exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞
  if [ ! -f "./scripts/.env.template" ]; then
      echo "üõë –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ ./scripts/.env.template –Ω–µ –Ω–∞–π–¥–µ–Ω"
      exit 1
  fi

  # –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
  python3 "$PYTHON_SCRIPT" --original "$BASE_ENV" --template "./scripts/.env.template" --output ".env"

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  if [ $? -eq 0 ]; then
      echo "‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
  else
      echo "üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ .env"
      # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
      cp "$BASE_ENV" "./.env"
      echo "‚ö†Ô∏è‚ö†Ô∏è –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª $BASE_ENV –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–∞–π–ª .env"
  fi

  ENV_FILE=".env"
}

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–∫–µ—Ä
start_docker() {
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Dockerfile
  if [ ! -f "Dockerfile" ]; then
      error_exit "üõë Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏!"
  fi

  # –°–±–æ—Ä–∫–∞
  echo "üî® –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–æ–≤..."
    docker build -t ${IMAGE} . || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å Docker-–æ–±—Ä–∞–∑—ã"

  # –ó–∞–ø—É—Å–∫
  echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
  docker compose up -d --force-recreate || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
  docker compose logs -f || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"

  echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!${NC}"
  echo "‚úÖüîó FastAPI –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –£–¥–∞–ª–∏—Ç —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
rem_folder() {
  # –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–∞
  if [ -d "$FOLDER" ]; then
      read -p "üõë –ü–∞–ø–∫–∞ '$FOLDER' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç—å –µ—ë? [y/N]: " confirm
      case "$confirm" in
          [yY]|[–Ω–ù])
              echo "üóë –£–¥–∞–ª—è—é –ø–∞–ø–∫—É: $FOLDER"
              rm -rf "$FOLDER"
              echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ $FOLDER..."
              mkdir -p "${FOLDER}" || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"
              ;;
          *)
              echo "üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–æ–π '$FOLDER'"
              ;;
      esac
  else
      echo "üìÅ –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $FOLDER."
      mkdir -p "${FOLDER}" || error_exit "üõë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"
      echo "‚úÖ –ü–∞–ø–∫–∞ $FOLDER —Å–æ–∑–¥–∞–Ω–∞"
  fi
}

# –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å
init_net() {
  if ! docker network ls --format '{{.Name}}' | grep -qw "$NET"; then
    docker network create "$NET" || error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å Docker"
  else
    echo "‚ö†Ô∏è –°–µ—Ç—å $NET —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
  fi
}

main() {
  set -euo pipefail
  init
  parse
  show_args

  if [[ "$LOAD_DOCKER" =~ ^[yY]$ ]]; then
    load_docker
  fi

  echo -e "${GREEN}üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
  for container in "${CONTAINERS[@]}"; do
    stop_container "$container"
  done


  docker system prune -f || error_exit "üõë–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"

  if [[ "$DEL_PROJECT" =~ ^[yY]$ ]]; then
    rem_folder  # —É–¥–∞–ª–∏—Ç + —Å–æ–∑–¥–∞—Å—Ç –∏ –∑–∞–π–¥—ë—Ç
  fi

  mkdir -p "$FOLDER" && cd "$FOLDER" || error_exit "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É"
  git_update      # –∫–ª–æ–Ω –∏–ª–∏ pull
  mkdir -p logs stat pgdata || error_exit "üõë–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
  init_net
  env_set
  start_docker
}

main "$@"
